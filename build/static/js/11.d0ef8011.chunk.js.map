{"version":3,"sources":["components/Cards/InfoCard.js","components/Chart/ChartCard.js","components/Chart/ChartLegend.js","components/RoundIcon.js","utils/demo/chartsData.js","pages/Dashboard.js","components/Typography/PageTitle.js","components/OrdersTable.js"],"names":["InfoCard","_ref","title","value","icon","children","React","createElement","Card","CardBody","className","Chart","ChartLegend","legends","map","legend","key","concat","color","RoundIcon","Icon","_ref$iconColorClass","iconColorClass","_ref$bgColorClass","bgColorClass","cls","classNames","doughnutLegends","lineLegends","doughnutOptions","data","datasets","backgroundColor","label","labels","options","responsive","cutoutPercentage","display","lineOptions","borderColor","fill","tooltips","mode","intersect","hover","scales","x","scaleLabel","labelString","y","Dashboard","Fragment","PageTitle","PeopleIcon","MoneyIcon","CartIcon","ChartCard","Line","Doughnut","OrdersTable","resultsPerPage","filter","_useState","useState","_useState2","_slicedToArray","page","setPage","_useState3","_useState4","setData","_useState5","_useState6","totalResults","setTotalResults","token","localStorage","getItem","loggedUser","JSON","parse","formatDateWithoutDashes","dateString","Date","toLocaleDateString","year","month","day","replace","fetchData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","config","response","ordersData","filteredData","flattenedGroups","wrap","_context","prev","next","headers","Authorization","axios","get","sent","order","status","flatMap","length","slice","t0","console","error","stop","apply","arguments","exportToExcel","_ref3","_callee2","workbook","worksheet","headerRow","buffer","blob","_context2","ExcelJS","Workbook","addWorksheet","addRow","forEach","groups","group","rowData","createdAt","id","user","companyName","type","city","detailType","model","name","height","width","number","handle","price","bothSidesLaminated","totalPrice","folio","profil","newRow","pattern","fgColor","argb","xlsx","writeBuffer","Blob","saveAs","useEffect","role","Button","layout","onClick","TableContainer","Table","TableHeader","TableCell","TableBody","i","TableRow","Select","Link","to","TableFooter","Pagination","onChange","p"],"mappings":"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","file":"static/js/11.d0ef8011.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardBody } from '@windmill/react-ui'\n\nfunction InfoCard({ title, value, children: icon }) {\n  return (\n    <Card>\n      <CardBody className=\"flex items-center\">\n        {icon}\n        <div>\n          <p className=\"mb-2 text-sm font-medium text-gray-600 dark:text-gray-400\">{title}</p>\n          <p className=\"text-lg font-semibold text-gray-700 dark:text-gray-200\">{value}</p>\n        </div>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default InfoCard\n","import React from 'react'\n\nfunction Chart({ children, title }) {\n  return (\n    <div className=\"min-w-0 p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800\">\n      <p className=\"mb-4 font-semibold text-gray-800 dark:text-gray-300\">{title}</p>\n      {children}\n    </div>\n  )\n}\n\nexport default Chart\n","import React from 'react'\n\nfunction ChartLegend({ legends }) {\n  return (\n    <div className=\"flex justify-center mt-4 space-x-3 text-sm text-gray-600 dark:text-gray-400\">\n      {legends.map((legend) => (\n        <div className=\"flex items-center\" key={legend.title}>\n          <span className={`inline-block w-3 h-3 mr-1 ${legend.color} rounded-full`}></span>\n          <span>{legend.title}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ChartLegend\n","import React from 'react'\nimport classNames from 'classnames'\n\nfunction RoundIcon({\n  icon: Icon,\n  iconColorClass = 'text-purple-600 dark:text-purple-100',\n  bgColorClass = 'bg-purple-100 dark:bg-purple-600',\n  className,\n}) {\n  const baseStyle = 'p-3 rounded-full'\n\n  const cls = classNames(baseStyle, iconColorClass, bgColorClass, className)\n  return (\n    <div className={cls}>\n      <Icon className=\"w-5 h-5\" />\n    </div>\n  )\n}\n\nexport default RoundIcon\n","export const doughnutLegends = [\n  { title: \"Мембранна Вратичка\", color: \"bg-blue-500\" },\n  { title: \"Двустранно Грундиран МДФ\", color: \"bg-teal-600\" },\n  { title: \"Фурнирован МДФ\", color: \"bg-purple-600\" },\n];\n\nexport const lineLegends = [\n  { title: \"От Админ\", color: \"bg-teal-600\" },\n  { title: \"От Клиент\", color: \"bg-purple-600\" },\n];\n\nexport const barLegends = [\n  { title: \"Shoes\", color: \"bg-teal-600\" },\n  { title: \"Bags\", color: \"bg-purple-600\" },\n];\nexport const realTimeUsersBarLegends = [\n  { title: \"Active Users\", color: \"bg-teal-600\" },\n];\n\nexport const doughnutOptions = {\n  data: {\n    datasets: [\n      {\n        data: [33, 33, 33],\n        /**\n         * These colors come from Tailwind CSS palette\n         * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\n         */\n        backgroundColor: [\"#0694a2\", \"#1c64f2\", \"#7e3af2\"],\n        label: \"Dataset 1\",\n      },\n    ],\n    labels: [\"Мембранна Вратичка\", \"Двустранно Грундиран МДФ\", \"Фурнирован МДФ\"],\n  },\n  options: {\n    responsive: true,\n    cutoutPercentage: 80,\n  },\n  legend: {\n    display: false,\n  },\n};\n\nexport const lineOptions = {\n  data: {\n    labels: [\"Януари\", \"Фебруари\", \"Март\", \"Април\", \"Май\", \"Юни\", \"Юли\"],\n    datasets: [\n      {\n        label: \"от Админ\",\n        /**\n         * These colors come from Tailwind CSS palette\n         * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\n         */\n        backgroundColor: \"#0694a2\",\n        borderColor: \"#0694a2\",\n        data: [43, 48, 40, 54, 67, 73, 70],\n        fill: false,\n      },\n      {\n        label: \"От Клиент\",\n        fill: false,\n        /**\n         * These colors come from Tailwind CSS palette\n         * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\n         */\n        backgroundColor: \"#7e3af2\",\n        borderColor: \"#7e3af2\",\n        data: [24, 50, 64, 74, 52, 51, 65],\n      },\n    ],\n  },\n  options: {\n    responsive: true,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n    },\n    hover: {\n      mode: \"nearest\",\n      intersect: true,\n    },\n    scales: {\n      x: {\n        display: true,\n        scaleLabel: {\n          display: true,\n          labelString: \"Month\",\n        },\n      },\n      y: {\n        display: true,\n        scaleLabel: {\n          display: true,\n          labelString: \"Value\",\n        },\n      },\n    },\n  },\n  legend: {\n    display: false,\n  },\n};\n\nexport const barOptions = {\n  data: {\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n    datasets: [\n      {\n        label: \"Shoes\",\n        backgroundColor: \"#0694a2\",\n        // borderColor: window.chartColors.red,\n        borderWidth: 1,\n        data: [-3, 14, 52, 74, 33, 90, 70],\n      },\n      {\n        label: \"Bags\",\n        backgroundColor: \"#7e3af2\",\n        // borderColor: window.chartColors.blue,\n        borderWidth: 1,\n        data: [66, 33, 43, 12, 54, 62, 84],\n      },\n    ],\n  },\n  options: {\n    responsive: true,\n  },\n  legend: {\n    display: false,\n  },\n};\n\nexport const realTimeUsersBarOptions = {\n  data: {\n    labels: [\n      \"6.00\",\n      \"6.10\",\n      \"6.20\",\n      \"6.30\",\n      \"6.40\",\n      \"6.50\",\n      \"7.00\",\n      \"7.10\",\n      \"7.20\",\n      \"7.30\",\n      \"7.40\",\n      \"7.50\",\n      \"Now\",\n    ],\n    datasets: [\n      {\n        label: \"Active Users\",\n        backgroundColor: \"#0694a2\",\n        // borderColor: window.chartColors.red,\n        borderWidth: 1,\n        data: [2, 14, 52, 74, 33, 90, 70, 34, 56, 62, 11, 23, 55],\n      },\n    ],\n  },\n  options: {\n    responsive: true,\n  },\n  legend: {\n    display: false,\n  },\n};\n","import React from \"react\";\n\nimport InfoCard from \"../components/Cards/InfoCard\";\nimport ChartCard from \"../components/Chart/ChartCard\";\nimport { Doughnut, Line } from \"react-chartjs-2\";\nimport ChartLegend from \"../components/Chart/ChartLegend\";\nimport PageTitle from \"../components/Typography/PageTitle\";\nimport { ChatIcon, CartIcon, MoneyIcon, PeopleIcon } from \"../icons\";\nimport RoundIcon from \"../components/RoundIcon\";\n\nimport {\n  doughnutOptions,\n  lineOptions,\n  doughnutLegends,\n  lineLegends,\n} from \"../utils/demo/chartsData\";\nimport OrdersTable from \"../components/OrdersTable\";\n\n\nfunction Dashboard() {\n\n  return (\n    <>\n      <PageTitle>Контролен Панел</PageTitle>\n\n      {/* <CTA /> */}\n\n      {/* <!-- Cards --> */}\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4\">\n        <InfoCard title=\"Брой клиенти\" value=\"765\">\n          <RoundIcon\n            icon={PeopleIcon}\n            iconColorClass=\"text-orange-500 dark:text-orange-100\"\n            bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n\n        <InfoCard title=\"Общa печалба\" value=\"126,760.89 лв.\">\n          <RoundIcon\n            icon={MoneyIcon}\n            iconColorClass=\"text-green-500 dark:text-green-100\"\n            bgColorClass=\"bg-green-100 dark:bg-green-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n\n        <InfoCard title=\"Нови поръчки\" value=\"150\">\n          <RoundIcon\n            icon={CartIcon}\n            iconColorClass=\"text-blue-500 dark:text-blue-100\"\n            bgColorClass=\"bg-blue-100 dark:bg-blue-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n\n        <InfoCard title=\"Приходи за последните 30 дни\" value=\"12,345 лв.\">\n          <RoundIcon\n            icon={MoneyIcon}\n            iconColorClass=\"text-teal-500 dark:text-teal-100\"\n            bgColorClass=\"bg-teal-100 dark:bg-teal-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n      </div>\n\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2\">\n        <ChartCard title=\"Създадени поръчки по тип потребител\">\n          <Line {...lineOptions} />\n          <ChartLegend legends={lineLegends} />\n        </ChartCard>\n\n        <ChartCard title=\"Използвани материали\">\n          <Doughnut {...doughnutOptions} />\n          <ChartLegend legends={doughnutLegends} />\n        </ChartCard>\n      </div>\n\n      <PageTitle>Поръчки</PageTitle>\n      <OrdersTable resultsPerPage={10} />\n    </>\n  );\n}\n\nexport default Dashboard;\n","import React from 'react'\n\nfunction PageTitle({ children }) {\n  return (\n    <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\n  )\n}\n\nexport default PageTitle\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Button,Select\n} from \"@windmill/react-ui\";\nimport { Link } from 'react-router-dom'\nimport json2xls from 'json2xls'; // Import json2xls\nimport { saveAs } from \"file-saver\"; // Import saveAs function\nimport * as XLSX from 'xlsx';\nimport ExcelJS from 'exceljs';\n\n\n\n\n\nconst OrdersTable = ({ resultsPerPage, filter }) => {\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  const [totalResults, setTotalResults] = useState(0);\n  const token = localStorage.getItem('accessToken')\n  const loggedUser =JSON.parse(localStorage.getItem('user'))\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  const formatDateWithoutDashes = (dateString) => {\n    const date = new Date(dateString);\n    const options = { year: 'numeric', month: '2-digit', day: '2-digit' };\n    return date.toLocaleDateString('en-US', options).replace(/\\//g, ''); // Remove slashes\n  };\n\n  const fetchData = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      };\n      const response = await axios.get(\"http://localhost:8080/api/orders/all\", config);\n      const ordersData = response.data;\n\n      // Apply filters if necessary\n      let filteredData = ordersData;\n      if (filter === \"изпратена\") {\n        filteredData = ordersData.filter(order => order.status === \"Paid\");\n      } else if (filter === \"създадена\") {\n        filteredData = ordersData.filter(order => order.status === \"CREATED\");\n      } else if (filter === \"изпълнява се\") {\n        filteredData = ordersData.filter(order => order.status === \"WORKING_ON\");\n      } else if (filter === \"изпълнена\") {\n        filteredData = ordersData.filter(order => order.status === \"Paid\");\n      }\n\n      // Flatten the groups and update the totalResults and data state\n      const flattenedGroups = filteredData.flatMap(order => order);\n      setTotalResults(flattenedGroups.length);\n      setData(flattenedGroups.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n\n  const exportToExcel = async () => {\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet('Orders');\n\n    const headerRow = [\n      \"ПОРЕДЕН НОМЕР\", \"Група\", \"ДАТА\", \"ПОРЪЧКА\", \"КЛИЕНТ\", \"ВИД\", \"ГРАД\",\n      \"ЕТИКЕТ\", \"МОДЕЛ\", \"ВИСОЧИНА\", \"ШИРИНА\", \"БРОЙ КОЛИЧЕСТВО\",\n      \"МЕРНА ЕДИНИЦА\", \"ДРЪЖКА\", \"ЕДИНИЧНА ЦЕНА\", \"ЦЕНА НА ДРЪЖКА\",\n      \"ДВУСТРАННО ФОЛИРАНЕ\", \"СТОЙНОСТ\", \"ФОЛИО\", \"ПРОФИЛ\",\n    ];\n\n    worksheet.addRow(headerRow);\n\n    data.forEach(order => {\n      order.groups.forEach(group => {\n        const rowData = [\n          formatDateWithoutDashes(order.createdAt) + order.id, \"Група\", order.createdAt, order.id, order.user.companyName, order.type === \"BY_HAND\" ? \"Ръчно - от Администратор\" : \"От клиент\",\n          order.user.city, order.detailType, group.model.name, group.height, group.width, group.number,\n          \"квадратен метър\", group.handle.name, group.handle.price, \"Цена на Дръжка\",\n          group.bothSidesLaminated ? \"ДВУСТРАННО\" : \"\", order.totalPrice, group.folio.name, group.profil.name\n        ];\n        const newRow = worksheet.addRow(rowData);\n\n        // Check if order status is CREATED and set row color to red\n        if (order.status === \"CREATED\") {\n          newRow.fill = {\n            type: 'pattern',\n            pattern: 'solid',\n            fgColor: { argb: 'FF00FF00' }, // Green colornpom \n          };\n        } else if (order.status === \"WORKING_ON\") {\n          newRow.fill = {\n            type: 'pattern',\n            pattern: 'solid',\n            fgColor: { argb: 'FFFFFF00' }, // Yellow color\n          };\n        }\n      });\n    });\n\n    const buffer = await workbook.xlsx.writeBuffer();\n    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n\n    saveAs(blob, 'Справка - ' + new Date().toLocaleDateString() + '.xlsx');\n  };\n\n\n  useEffect(() => {\n    fetchData();\n  }, [page, resultsPerPage, filter]);\n  return (\n      <div>\n        {loggedUser.data.role === '[ADMIN]' && (\n        <>\n          <div className=\"mt-4 \">\n            <Button layout=\"outline\" onClick={exportToExcel} className=\"btn btn-primary\">\n              Експорт на справка\n            </Button>\n          </div>\n          <hr className=\"customeDivider mx-4 my-5\" />\n        </>\n      )}\n      {/* Table */}\n      <TableContainer className=\"mb-8\">\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Номер</TableCell>\n              <TableCell>Oт дата</TableCell>\n              <TableCell>Статус</TableCell>\n              <TableCell>Потребител</TableCell>\n              <TableCell>Крайна сума</TableCell>\n              <TableCell>Тип поръчка</TableCell>\n              <TableCell>Отстъпка</TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n\n            {data.map((order, i) => (\n              <TableRow key={i}>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <div>\n                      <p className=\"font-semibold\">{formatDateWithoutDashes(order.createdAt) + order.id}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <div>\n                      <p className=\"font-semibold\">{order.createdAt}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <Select>\n                  <option value={order.status}> \n{order.status === \"WORKING_ON\" ? \"Изпълнява се\" : order.status === \"CREATED\" ? \"Създадена  \" : order.status}\n                  </option>\n                  <option value=\"CREATED\">Създадена</option>\n                  <option value=\"PAID\">Платена</option>\n                  <option value=\"WORKING_ON\">Изпълнява се</option>\n                 \n                  </Select>\n                 \n                </TableCell>\n                <TableCell>\n\n                  <div className=\"flex items-center text-sm\">\n                    <div>\n                      <p className=\"font-semibold\">{order.user.companyName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <div>\n                      <span className=\"font-semibold\">{order.totalPrice}</span  ><span>лв.</span>\n                    </div>\n                  </div>\n                </TableCell>\n\n\n                <TableCell>\n                  {order.type === \"BY_HAND\" ? \"Ръчно - от Администратор\" : \"От клиент\"}\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <div>\n                      <span className=\"font-semibold\">0</span  ><span>%</span>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell className=\"w-1/12 text-center\">\n                  <Link\n                    to={`orders/${order.id}`}\n                    className=\"text-indigo-600 hover:text-indigo-900\"\n                  >\n                    Детайли\n                  </Link>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n\n          <Pagination\n            totalResults={totalResults}\n            resultsPerPage={resultsPerPage}\n            label=\"Table navigation\"\n            onChange={onPageChange}\n          />\n        </TableFooter>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default OrdersTable;\n"],"sourceRoot":""}