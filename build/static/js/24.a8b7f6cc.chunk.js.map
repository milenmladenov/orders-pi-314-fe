{"version":3,"sources":["assets/xlxs/за етикети.xlsx","pages/SingleOrder.js","components/Typography/PageTitle.js","Constants.js"],"names":["module","exports","SingleOrder","_ref","match","_useState","config","url","API_BASE_URL","useState","_useState2","_slicedToArray","order","setOrder","orderId","params","id","token","localStorage","getItem","loggedUser","JSON","parse","useEffect","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_config","response","wrap","_context","prev","next","headers","Authorization","concat","axios","get","sent","data","t0","console","error","stop","apply","arguments","fetchOrder","React","createElement","exportToExcel","_ref3","_callee2","existingWorkbook","dataWorksheet","buffer","blob","_context2","labelsFile","responseType","ExcelJS","Workbook","xlsx","load","getWorksheet","groups","forEach","group","dateString","rowData","user","companyName","createdAt","Date","toLocaleDateString","year","month","day","replace","model","name","height","width","number","addRow","writeBuffer","Blob","type","saveAs","log","className","PageTitle","status","city","companyAddress","bulstat","mol","phone","companyAdress","door","role","Fragment","Button","onClick","TableContainer","Table","TableHeader","TableCell","TableBody","map","j","TableRow","key","folio","profil","handle","price","matPrice","isBothSidesLaminated","groupTotalPrice","totalPrice","children"],"mappings":"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","file":"static/js/24.a8b7f6cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/за етикети.fc2dcc59.xlsx\";","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Button, TableContainer, Table, TableHeader, TableCell, TableRow, TableBody } from '@windmill/react-ui';\nimport PageTitle from \"../components/Typography/PageTitle\";\nimport labelsFile from \"../assets/xlxs/за етикети.xlsx\";\nimport json2xls from 'json2xls'; // Import json2xls\nimport { saveAs } from \"file-saver\"; // Import saveAs function\nimport * as XLSX from 'xlsx';\nimport ExcelJS from 'exceljs';\nimport { config } from '../Constants';\n\n\nconst SingleOrder = ({ match }) => {\n    const apiBaseUrl = config.url.API_BASE_URL;\n\n    const [order, setOrder] = useState(null);\n    const orderId = match.params.id; // Get the orderId from the route parameter\n    const token = localStorage.getItem('accessToken')\n    const loggedUser = JSON.parse(localStorage.getItem('user'))\n    const formatDateWithoutDashes = (dateString) => {\n        const date = new Date(dateString);\n        const options = { year: 'numeric', month: '2-digit', day: '2-digit' };\n        return date.toLocaleDateString('en-US', options).replace(/\\//g, ''); // Remove slashes\n    };\n\n    useEffect(() => {\n        const fetchOrder = async () => {\n\n            try {\n                const config = {\n                    headers: {\n                        Authorization: `Bearer ${token}`,\n                    },\n                };\n                const response = await axios.get(`http://localhost:8080/api/orders/${orderId}`, config);\n                setOrder(response.data);\n            } catch (error) {\n                console.error('Error fetching order:', error);\n            }\n        };\n\n        fetchOrder();\n    }, [orderId]);\n\n    if (!order) {\n        return <div>Loading...</div>;\n    }\n    const exportToExcel = async () => {\n        try {\n            const response = await axios.get(labelsFile, { responseType: 'arraybuffer' });\n            const existingWorkbook = new ExcelJS.Workbook();\n            await existingWorkbook.xlsx.load(response.data)\n\n            const dataWorksheet = existingWorkbook.getWorksheet('Data')\n            order.groups.forEach(group => {\n                \n                const rowData = [\"\",\n                order.user.companyName, formatDateWithoutDashes(order.createdAt) + order.id, group.model.name, \"\", group.height, group.width, group.number, order.id + \"-\"];\n\n                const newRow = dataWorksheet.addRow(rowData);\n           })\n        \n         \n\n            const buffer = await existingWorkbook.xlsx.writeBuffer();\n            const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n        \n            saveAs(blob, 'етикети - ' + order.id + '.xlsx');\n        \n\n        } catch (error) {\n            console.error('Error exporting to Excel:', error);\n        }\n    };\n\n    return (\n        console.log(order),\n        <div className='border'>\n            <div className='text-center border'>\n                <PageTitle>Статус на поръчката :  {order.status === \"WORKING_ON\" ? \"Изпълнява се\" : order.status === \"CREATED\" ? \"Създадена  \" : order.status}\n                </PageTitle>        </div>\n            <div className='grid grid-cols-2 h-10 mb-4 '><div className='text-right border'><p className='mr-3'>От дата: {order.createdAt}</p></div><div className='  text-left border'><p className='ml-3'>Номер: {order.id}</p></div></div>\n            <div className='grid grid-cols-2 border mb-4 '><div className='grid grid-cols-1 ml-3 mt-3 mb-3 space-y-[5px]'><div className='mb-2'>Фирма : {order.user.companyName}</div><div className='mb-2'>Град : {order.user.city}</div><div className='mb-2'>Адрес : {order.user.companyAddress}</div><div className='mb-2'>ЕИК/ВАТ : {order.user.bulstat}</div><div>МОЛ : {order.user.mol}</div></div><div className='grid grid-cols-1 border'><div className='ml-3 mt-3'>Телефон: {order.user.phone}</div><div className='ml-3'>Адрес на доставка : {order.user.companyAdress}</div></div></div>\n            <div className='grid grid-cols-2'><h1 className='ml-3'>Материал : <span className='font-semibold'> {order.groups[0].door.name}</span></h1>{loggedUser.data.role === '[ADMIN]' && (\n                <>\n                    <div className='text-right mr-3 mb-4'>\n                        <Button onClick={exportToExcel} className=\"\">\n                            Генериране на етикети\n                        </Button>\n\n                    </div>\n                </>\n            )}</div>\n            <TableContainer>\n\n                <Table>\n                    <TableHeader>\n                        <tr>\n                            <TableCell>Модел</TableCell>\n                            <TableCell>Фолио</TableCell>\n                            <TableCell>Профил</TableCell>\n                            <TableCell>Дръжка</TableCell>\n                            <TableCell>Височина,мм</TableCell>\n                            <TableCell>Широчина, мм</TableCell>\n                            <TableCell>Брой</TableCell>\n                            <TableCell>Цена Дръжка, бр.</TableCell>\n                            <TableCell>Цена мат за кв.м</TableCell>\n                            <TableCell>Двустр. ламиниране</TableCell>\n                            <TableCell>Стойност</TableCell>\n\n                            {/* Add more table headers for other fields */}\n                        </tr>\n                    </TableHeader>\n                    <TableBody>\n                        {order.groups.map((group, j) => (\n                            <TableRow key={j}>\n\n                                <TableCell>{group.model.name}</TableCell>\n                                <TableCell>{group.folio.name}</TableCell>\n                                <TableCell>{group.profil.name}</TableCell>\n                                <TableCell>{group.handle.name}</TableCell>\n                                <TableCell>{group.height}</TableCell>\n                                <TableCell>{group.width}</TableCell>\n                                <TableCell>{group.number}</TableCell>\n                                <TableCell>{group.handle.price}</TableCell>\n                                <TableCell>{group.matPrice}</TableCell>\n                                <TableCell>{group.isBothSidesLaminated}</TableCell>\n                                <TableCell>{group.groupTotalPrice}лв.</TableCell>\n\n                            </TableRow>))}\n\n                    </TableBody>\n\n                </Table>\n                <div ><p className='font-semibold content-end text-right mr-3 mt-3 mb-3'>Обща стойност : {order.totalPrice}лв.</p></div>\n            </TableContainer>\n            <div className=' h-10 grid grid-cols-5  gap-20 content-end '> <div></div>\n                <div> </div><div></div><div></div>  <div></div>\n                <div></div>\n\n                <div></div><div></div><div></div>\n            </div>\n        </div>\n    );\n};\n\nexport default SingleOrder;\n","import React from 'react'\n\nfunction PageTitle({ children }) {\n  return (\n    <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\n  )\n}\n\nexport default PageTitle\n","const prod = {\n    url: {\n      API_BASE_URL: 'https://orders-pi314-396621.uc.r.appspot.com' ,\n    }\n  }\n  \n  const dev = {\n    url: {\n      API_BASE_URL: 'http://localhost:8080'\n    }\n  }\n  \n  export const config = process.env.NODE_ENV === 'development' ? dev : prod"],"sourceRoot":""}