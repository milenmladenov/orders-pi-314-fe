{"version":3,"sources":["context/SidebarContext.js","components/ThemedSuspense.js","components/AccessibleNavigationAnnouncer.js","App.js","index.js","windmillTheme.js"],"names":["SidebarContext","React","createContext","SidebarProvider","children","useState","isSidebarOpen","setIsSidebarOpen","toggleSidebar","closeSidebar","value","useMemo","Provider","ThemedSuspense","className","AccessibleNavigationAnnouncer","message","setMessage","location","useLocation","useEffect","pathname","slice","setTimeout","role","aria-live","aria-atomic","Layout","lazy","Login","CreateAccount","ForgotPassword","App","path","component","exact","from","to","ReactDOM","render","fallback","usePreferences","theme","button","danger","base","active","disabled","document","getElementById"],"mappings":"8NAGaA,EAAiBC,IAAMC,gBAEvBC,EAAkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChC,EAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEA,SAASC,IACPD,GAAkBD,GAGpB,SAASG,IACPF,GAAiB,GAGnB,IAAMG,EAAQC,mBACZ,iBAAO,CACLL,gBACAE,gBACAC,kBAEF,CAACH,IAGH,OACE,kBAACN,EAAeY,SAAhB,CAAyBF,MAAOA,GAAQN,K,gCC1B5C,0BAceS,IAXf,WACE,OACE,yBAAKC,UAAU,8HACb,yBAAKA,UAAS,cACZ,8BACA,kC,uLCgBOC,MArBf,WACE,MAA8BV,mBAAS,IAAvC,mBAAOW,EAAP,KAAgBC,EAAhB,KACMC,EAAWC,cAYjB,OAVAC,qBAAU,WAEJF,EAASG,SAASC,MAAM,GAE1BC,YAAW,kBAAMN,EAAW,gBAAD,OAAiBC,EAASG,SAASC,MAAM,GAAzC,aAAsD,KAEjFL,EAAW,MAEZ,CAACC,IAGF,0BAAMJ,UAAU,UAAUU,KAAK,SAASC,YAAU,SAASC,cAAY,QACpEV,ICVDW,EAASC,gBAAK,kBAAM,wDACpBC,EAAQD,gBAAK,kBAAM,wDACnBE,EAAgBF,gBAAK,kBAAM,wDAC3BG,EAAiBH,gBAAK,kBAAM,kCAsBnBI,MApBf,WACE,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWL,IAChC,kBAAC,IAAD,CAAOI,KAAK,kBAAkBC,UAAWJ,IACzC,kBAAC,IAAD,CAAOG,KAAK,mBAAmBC,UAAWH,IAG1C,kBAAC,IAAD,CAAOE,KAAK,OAAOC,UAAWP,IAE9B,kBAAC,IAAD,CAAUQ,OAAK,EAACC,KAAK,IAAIC,GAAG,e,wBClBtCC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC3B,EAAA,EAAD,OAClB,kBAAC,WAAD,CAAU4B,gBAAc,EAACC,MCZhB,CACbC,OAAQ,CACNC,OAAQ,CACNC,KAAM,kDACNC,OACE,mEACFC,SAAU,oCDOR,kBAAC,EAAD,SAINC,SAASC,eAAe,W","file":"static/js/main.aa2ef9c6.chunk.js","sourcesContent":["import React, { useState, useMemo } from \"react\";\n\n// create context\nexport const SidebarContext = React.createContext();\n\nexport const SidebarProvider = ({ children }) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  function toggleSidebar() {\n    setIsSidebarOpen(!isSidebarOpen);\n  }\n\n  function closeSidebar() {\n    setIsSidebarOpen(false);\n  }\n\n  const value = useMemo(\n    () => ({\n      isSidebarOpen,\n      toggleSidebar,\n      closeSidebar,\n    }),\n    [isSidebarOpen]\n  );\n\n  return (\n    <SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>\n  );\n};\n","import React from \"react\";\nimport \"../assets/css/loadingSpinner.css\";\n\nfunction ThemedSuspense() {\n  return (\n    <div className=\"w-full h-screen flex justify-center items-center p-6 text-lg font-medium text-gray-600 dark:text-gray-400 dark:bg-gray-900\">\n      <div className={`lds-ripple`}>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n}\n\nexport default ThemedSuspense;\n","import React, { useState, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nfunction AccessibleNavigationAnnouncer() {\n  const [message, setMessage] = useState('')\n  const location = useLocation()\n\n  useEffect(() => {\n    // ignore the /\n    if (location.pathname.slice(1)) {\n      // make sure navigation has occurred and screen reader is ready\n      setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500)\n    } else {\n      setMessage('')\n    }\n  }, [location])\n\n  return (\n    <span className=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\n      {message}\n    </span>\n  )\n}\n\nexport default AccessibleNavigationAnnouncer\n","import React, { lazy } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport AccessibleNavigationAnnouncer from \"./components/AccessibleNavigationAnnouncer\";\n\nconst Layout = lazy(() => import(\"./containers/Layout\"));\nconst Login = lazy(() => import(\"./pages/Login\"));\nconst CreateAccount = lazy(() => import(\"./pages/CreateAccount\"));\nconst ForgotPassword = lazy(() => import(\"./pages/ForgotPassword\"));\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <AccessibleNavigationAnnouncer />\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/create-account\" component={CreateAccount} />\n          <Route path=\"/forgot-password\" component={ForgotPassword} />\n\n          {/* Place new routes over this */}\n          <Route path=\"/app\" component={Layout} />\n          {/* If you have an index page, you can remothis Redirect */}\n          <Redirect exact from=\"/\" to=\"/login\" />\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/tailwind.output.css\";\nimport App from \"./App\";\nimport { SidebarProvider } from \"./context/SidebarContext\";\nimport ThemedSuspense from \"./components/ThemedSuspense\";\nimport { Windmill } from \"@windmill/react-ui\";\nimport windmillTheme from \"./windmillTheme\";\n\nReactDOM.render(\n  <SidebarProvider>\n    <Suspense fallback={<ThemedSuspense />}>\n      <Windmill usePreferences theme={windmillTheme}>\n        <App />\n      </Windmill>\n    </Suspense>\n  </SidebarProvider>,\n  document.getElementById(\"root\")\n);\n","export default {\n  button: {\n    danger: {\n      base: \"text-white bg-red-600 border border-transparent\",\n      active:\n        \"active:bg-red-600 hover:bg-red-700 focus:ring focus:ring-red-300\",\n      disabled: \"opacity-50 cursor-not-allowed\",\n    },\n  },\n};\n"],"sourceRoot":""}