{"ast":null,"code":"var _jsxFileName = \"/Users/milenmladenov/asset-management-fe/src/pages/newExcelOrderForm.js\";\nimport React, { useState } from 'react';\nimport XLSX from 'xlsx'; // Import the xlsx library\nimport NewOrderForm from './newOrderForm';\nconst NewExcelOrderForm = () => {\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = e => {\n      const data = new Uint8Array(e.target.result);\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n      const excelData = XLSX.utils.sheet_to_json(worksheet, {\n        header: 1\n      });\n\n      // Assuming the headers are in the order: 'Модел', 'Фолио', 'Височина', 'Ширина', 'Брой', 'м2', 'Профил', 'Дръжка'\n      const [modelHeader, folioHeader, heightHeader, widthHeader, quantityHeader, areaHeader, profilHeader, handleHeader] = excelData[0];\n      const formData = excelData.slice(1).map(row => ({\n        modelName: row[modelHeader],\n        folioName: row[folioHeader],\n        height: row[heightHeader],\n        width: row[widthHeader],\n        number: row[quantityHeader],\n        area: row[areaHeader],\n        profilName: row[profilHeader],\n        handleName: row[handleHeader]\n      }));\n      setGroupForms(formData);\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/React.createElement(NewOrderForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  });\n};\nexport default NewExcelOrderForm;","map":{"version":3,"names":["React","useState","XLSX","NewOrderForm","NewExcelOrderForm","handleFileChange","event","file","target","files","reader","FileReader","onload","e","data","Uint8Array","result","workbook","read","type","worksheet","Sheets","SheetNames","excelData","utils","sheet_to_json","header","modelHeader","folioHeader","heightHeader","widthHeader","quantityHeader","areaHeader","profilHeader","handleHeader","formData","slice","map","row","modelName","folioName","height","width","number","area","profilName","handleName","setGroupForms","readAsArrayBuffer","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/milenmladenov/asset-management-fe/src/pages/newExcelOrderForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport XLSX from 'xlsx'; // Import the xlsx library\nimport NewOrderForm from './newOrderForm';\n\nconst NewExcelOrderForm = () => {\n    const handleFileChange = (event) => {\n        const file = event.target.files[0];\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          const data = new Uint8Array(e.target.result);\n          const workbook = XLSX.read(data, { type: 'array' });\n          const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n          const excelData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n      \n          // Assuming the headers are in the order: 'Модел', 'Фолио', 'Височина', 'Ширина', 'Брой', 'м2', 'Профил', 'Дръжка'\n          const [modelHeader, folioHeader, heightHeader, widthHeader, quantityHeader, areaHeader, profilHeader, handleHeader] = excelData[0];\n          const formData = excelData.slice(1).map((row) => ({\n            modelName: row[modelHeader],\n            folioName: row[folioHeader],\n            height: row[heightHeader],\n            width: row[widthHeader],\n            number: row[quantityHeader],\n            area: row[areaHeader],\n            profilName: row[profilHeader],\n            handleName: row[handleHeader],\n          }));\n      \n          setGroupForms(formData);\n        };\n        reader.readAsArrayBuffer(file);\n      };\n\n      return (\n        <NewOrderForm/>\n      )\n\n};\n\nexport default NewExcelOrderForm;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,MAAM,CAAC,CAAC;AACzB,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC5B,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;IAChC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;MACrB,MAAMC,IAAI,GAAG,IAAIC,UAAU,CAACF,CAAC,CAACL,MAAM,CAACQ,MAAM,CAAC;MAC5C,MAAMC,QAAQ,GAAGf,IAAI,CAACgB,IAAI,CAACJ,IAAI,EAAE;QAAEK,IAAI,EAAE;MAAQ,CAAC,CAAC;MACnD,MAAMC,SAAS,GAAGH,QAAQ,CAACI,MAAM,CAACJ,QAAQ,CAACK,UAAU,CAAC,CAAC,CAAC,CAAC;MACzD,MAAMC,SAAS,GAAGrB,IAAI,CAACsB,KAAK,CAACC,aAAa,CAACL,SAAS,EAAE;QAAEM,MAAM,EAAE;MAAE,CAAC,CAAC;;MAEpE;MACA,MAAM,CAACC,WAAW,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,cAAc,EAAEC,UAAU,EAAEC,YAAY,EAAEC,YAAY,CAAC,GAAGX,SAAS,CAAC,CAAC,CAAC;MAClI,MAAMY,QAAQ,GAAGZ,SAAS,CAACa,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEC,GAAG,KAAM;QAChDC,SAAS,EAAED,GAAG,CAACX,WAAW,CAAC;QAC3Ba,SAAS,EAAEF,GAAG,CAACV,WAAW,CAAC;QAC3Ba,MAAM,EAAEH,GAAG,CAACT,YAAY,CAAC;QACzBa,KAAK,EAAEJ,GAAG,CAACR,WAAW,CAAC;QACvBa,MAAM,EAAEL,GAAG,CAACP,cAAc,CAAC;QAC3Ba,IAAI,EAAEN,GAAG,CAACN,UAAU,CAAC;QACrBa,UAAU,EAAEP,GAAG,CAACL,YAAY,CAAC;QAC7Ba,UAAU,EAAER,GAAG,CAACJ,YAAY;MAC9B,CAAC,CAAC,CAAC;MAEHa,aAAa,CAACZ,QAAQ,CAAC;IACzB,CAAC;IACDzB,MAAM,CAACsC,iBAAiB,CAACzC,IAAI,CAAC;EAChC,CAAC;EAED,oBACEP,KAAA,CAAAiD,aAAA,CAAC9C,YAAY;IAAA+C,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAC,CAAC;AAGvB,CAAC;AAED,eAAenD,iBAAiB"},"metadata":{},"sourceType":"module"}