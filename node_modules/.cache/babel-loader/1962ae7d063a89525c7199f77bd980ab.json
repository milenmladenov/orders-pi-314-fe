{"ast":null,"code":"var _jsxFileName = \"/Users/milen.mladenov/asset-management-fe/src/pages/newExcelOrderForm.js\";\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nconst NewExcelOrderForm = () => {\n  const initialFormState = {\n    doorName: '',\n    modelName: \"Без\",\n    folioName: \"Без\",\n    handleName: 'Без Дръжка',\n    profilName: 'R1',\n    height: 400,\n    width: 400,\n    length: 2360,\n    number: 1,\n    bothSidesLaminated: \"false\",\n    detailType: {\n      material: \"\",\n      type: \"\"\n    },\n    deliveryAddress: '',\n    discount: 0,\n    note: ''\n  };\n  const [formState, setFormState] = useState(initialFormState);\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const binaryString = event.target.result;\n      const workbook = XLSX.read(binaryString, {\n        type: 'binary'\n      });\n      const sheetName = workbook.SheetNames[0]; // Assuming Sheet 1 is the first sheet\n      const sheet = workbook.Sheets[sheetName];\n      const data = XLSX.utils.sheet_to_json(sheet, {\n        header: 1\n      });\n\n      // Assuming the Excel sheet structure matches the keys in initialFormState\n      const newData = {\n        doorName: data[0][0],\n        modelName: data[0][1] || initialFormState.modelName,\n        folioName: data[0][2] || initialFormState.folioName,\n        handleName: data[0][3] || initialFormState.handleName,\n        profilName: data[0][4] || initialFormState.profilName,\n        height: data[0][5] || initialFormState.height,\n        width: data[0][6] || initialFormState.width,\n        length: data[0][7] || initialFormState.length,\n        number: data[0][8] || initialFormState.number,\n        bothSidesLaminated: data[0][9] || initialFormState.bothSidesLaminated,\n        detailType: {\n          material: data[0][10] || initialFormState.detailType.material,\n          type: data[0][11] || initialFormState.detailType.type\n        },\n        deliveryAddress: data[0][12] || initialFormState.deliveryAddress,\n        discount: data[0][13] || initialFormState.discount,\n        note: data[0][14] || initialFormState.note\n      };\n      setFormState(newData);\n    };\n    reader.readAsBinaryString(file);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: handleFileUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, JSON.stringify(formState, null, 2)));\n};\nexport default NewExcelOrderForm;","map":{"version":3,"names":["React","useState","XLSX","NewExcelOrderForm","initialFormState","doorName","modelName","folioName","handleName","profilName","height","width","length","number","bothSidesLaminated","detailType","material","type","deliveryAddress","discount","note","formState","setFormState","handleFileUpload","e","file","target","files","reader","FileReader","onload","event","binaryString","result","workbook","read","sheetName","SheetNames","sheet","Sheets","data","utils","sheet_to_json","header","newData","readAsBinaryString","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onChange","JSON","stringify"],"sources":["/Users/milen.mladenov/asset-management-fe/src/pages/newExcelOrderForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\n\nconst NewExcelOrderForm = () => {\n  const initialFormState = {\n    doorName: '',\n    modelName: \"Без\",\n    folioName: \"Без\",\n    handleName: 'Без Дръжка',\n    profilName: 'R1',\n    height: 400,\n    width: 400,\n    length: 2360,\n    number: 1,\n    bothSidesLaminated: \"false\",\n    detailType: {\n      material: \"\",\n      type: \"\"\n    },\n    deliveryAddress: '',\n    discount: 0,\n    note: ''\n  };\n\n  const [formState, setFormState] = useState(initialFormState);\n\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const binaryString = event.target.result;\n      const workbook = XLSX.read(binaryString, { type: 'binary' });\n      const sheetName = workbook.SheetNames[0]; // Assuming Sheet 1 is the first sheet\n      const sheet = workbook.Sheets[sheetName];\n      const data = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n\n      // Assuming the Excel sheet structure matches the keys in initialFormState\n      const newData = {\n        doorName: data[0][0],\n        modelName: data[0][1] || initialFormState.modelName,\n        folioName: data[0][2] || initialFormState.folioName,\n        handleName: data[0][3] || initialFormState.handleName,\n        profilName: data[0][4] || initialFormState.profilName,\n        height: data[0][5] || initialFormState.height,\n        width: data[0][6] || initialFormState.width,\n        length: data[0][7] || initialFormState.length,\n        number: data[0][8] || initialFormState.number,\n        bothSidesLaminated: data[0][9] || initialFormState.bothSidesLaminated,\n        detailType: {\n          material: data[0][10] || initialFormState.detailType.material,\n          type: data[0][11] || initialFormState.detailType.type,\n        },\n        deliveryAddress: data[0][12] || initialFormState.deliveryAddress,\n        discount: data[0][13] || initialFormState.discount,\n        note: data[0][14] || initialFormState.note,\n      };\n\n      setFormState(newData);\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileUpload} />\n      <pre>{JSON.stringify(formState, null, 2)}</pre>\n    </div>\n  );\n};\n\nexport default NewExcelOrderForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}