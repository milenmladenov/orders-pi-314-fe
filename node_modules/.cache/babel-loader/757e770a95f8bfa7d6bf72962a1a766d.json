{"ast":null,"code":"var _jsxFileName = \"/Users/milen.mladenov/asset-management-fe/src/pages/newExcelOrderForm.js\";\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nconst newExcelOrderForm = () => {\n  const [formState, setFormState] = useState(initialFormState);\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = event => {\n      const binaryString = event.target.result;\n      const workbook = XLSX.read(binaryString, {\n        type: 'binary'\n      });\n      const sheetName = workbook.SheetNames[0]; // Assuming Sheet 1 is the first sheet\n      const sheet = workbook.Sheets[sheetName];\n      const data = XLSX.utils.sheet_to_json(sheet, {\n        header: 1\n      });\n\n      // Assuming the Excel sheet structure matches the keys in initialFormState\n      const newData = {\n        doorName: data[0][0],\n        modelName: data[0][1] || initialFormState.modelName,\n        folioName: data[0][2] || initialFormState.folioName,\n        handleName: data[0][3] || initialFormState.handleName,\n        profilName: data[0][4] || initialFormState.profilName,\n        height: data[0][5] || initialFormState.height,\n        width: data[0][6] || initialFormState.width,\n        length: data[0][7] || initialFormState.length,\n        number: data[0][8] || initialFormState.number,\n        bothSidesLaminated: data[0][9] || initialFormState.bothSidesLaminated,\n        detailType: {\n          material: data[0][10] || initialFormState.detailType.material,\n          type: data[0][11] || initialFormState.detailType.type\n        },\n        deliveryAddress: data[0][12] || initialFormState.deliveryAddress,\n        discount: data[0][13] || initialFormState.discount,\n        note: data[0][14] || initialFormState.note\n      };\n      setFormState(newData);\n    };\n    reader.readAsBinaryString(file);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: handleFileUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, JSON.stringify(formState, null, 2)));\n};\nexport default newExcelOrderForm;","map":{"version":3,"names":["React","useState","XLSX","newExcelOrderForm","formState","setFormState","initialFormState","handleFileUpload","e","file","target","files","reader","FileReader","onload","event","binaryString","result","workbook","read","type","sheetName","SheetNames","sheet","Sheets","data","utils","sheet_to_json","header","newData","doorName","modelName","folioName","handleName","profilName","height","width","length","number","bothSidesLaminated","detailType","material","deliveryAddress","discount","note","readAsBinaryString","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onChange","JSON","stringify"],"sources":["/Users/milen.mladenov/asset-management-fe/src/pages/newExcelOrderForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\n\nconst newExcelOrderForm = () => {\n  const [formState, setFormState] = useState(initialFormState);\n\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const binaryString = event.target.result;\n      const workbook = XLSX.read(binaryString, { type: 'binary' });\n      const sheetName = workbook.SheetNames[0]; // Assuming Sheet 1 is the first sheet\n      const sheet = workbook.Sheets[sheetName];\n      const data = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n\n      // Assuming the Excel sheet structure matches the keys in initialFormState\n      const newData = {\n        doorName: data[0][0],\n        modelName: data[0][1] || initialFormState.modelName,\n        folioName: data[0][2] || initialFormState.folioName,\n        handleName: data[0][3] || initialFormState.handleName,\n        profilName: data[0][4] || initialFormState.profilName,\n        height: data[0][5] || initialFormState.height,\n        width: data[0][6] || initialFormState.width,\n        length: data[0][7] || initialFormState.length,\n        number: data[0][8] || initialFormState.number,\n        bothSidesLaminated: data[0][9] || initialFormState.bothSidesLaminated,\n        detailType: {\n          material: data[0][10] || initialFormState.detailType.material,\n          type: data[0][11] || initialFormState.detailType.type,\n        },\n        deliveryAddress: data[0][12] || initialFormState.deliveryAddress,\n        discount: data[0][13] || initialFormState.discount,\n        note: data[0][14] || initialFormState.note,\n      };\n\n      setFormState(newData);\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileUpload} />\n      <pre>{JSON.stringify(formState, null, 2)}</pre>\n    </div>\n  );\n};\n\nexport default newExcelOrderForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}