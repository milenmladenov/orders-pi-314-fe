{"ast":null,"code":"var nodeExcel = require('excel-export');\nvar transform = function (json, config) {\n  var conf = transform.prepareJson(json, config);\n  var result = nodeExcel.execute(conf);\n  return result;\n};\n\n//get a xls type based on js type\nfunction getType(obj, type) {\n  if (type) {\n    return type;\n  }\n  var t = typeof obj;\n  switch (t) {\n    case 'string':\n    case 'number':\n      return t;\n    case 'boolean':\n      return 'bool';\n    default:\n      return 'string';\n  }\n}\n\n//get a nested property from a JSON object given its key, i.e 'a.b.c'\nfunction getByString(object, path) {\n  path = path.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n  path = path.replace(/^\\./, ''); // strip a leading dot\n  var a = path.split('.');\n  while (a.length) {\n    var n = a.shift();\n    if (n in object) {\n      object = object[n] == undefined ? null : object[n];\n    } else {\n      return null;\n    }\n  }\n  return object;\n}\n\n//prepare json to be in the correct format for excel-export\ntransform.prepareJson = function (json, config) {\n  var res = {};\n  var conf = config || {};\n  var jsonArr = [].concat(json);\n  var fields = conf.fields || Object.keys(jsonArr[0] || {});\n  var types = [];\n  if (!(fields instanceof Array)) {\n    types = Object.keys(fields).map(function (key) {\n      return fields[key];\n    });\n    fields = Object.keys(fields);\n  }\n  //cols\n  res.cols = fields.map(function (key, i) {\n    return {\n      caption: key,\n      type: getType(jsonArr[0][key], types[i]),\n      beforeCellWrite: function (row, cellData, eOpt) {\n        eOpt.cellType = getType(cellData, types[i]);\n        return cellData;\n      }\n    };\n  });\n  //rows\n  res.rows = jsonArr.map(function (row) {\n    return fields.map(function (key) {\n      var value = getByString(row, key);\n      //stringify objects\n      if (value && value.constructor == Object) value = JSON.stringify(value);\n      //replace illegal xml characters with a square\n      //see http://www.w3.org/TR/xml/#charsets\n      //#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n      if (typeof value === 'string') {\n        value = value.replace(/[^\\u0009\\u000A\\u000D\\u0020-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]/g, '');\n      }\n      return value;\n    });\n  });\n  //add style xml if given\n  if (conf.style) {\n    res.stylesXmlFile = conf.style;\n  }\n  return res;\n};\ntransform.middleware = function (req, res, next) {\n  res.xls = function (fn, data, config) {\n    var xls = transform(data, config);\n    res.setHeader('Content-Type', 'application/vnd.openxmlformats');\n    res.setHeader(\"Content-Disposition\", \"attachment; filename=\" + fn);\n    res.end(xls, 'binary');\n  };\n  next();\n};\nmodule.exports = transform;","map":{"version":3,"names":["nodeExcel","require","transform","json","config","conf","prepareJson","result","execute","getType","obj","type","t","getByString","object","path","replace","a","split","length","n","shift","undefined","res","jsonArr","concat","fields","Object","keys","types","Array","map","key","cols","i","caption","beforeCellWrite","row","cellData","eOpt","cellType","rows","value","constructor","JSON","stringify","style","stylesXmlFile","middleware","req","next","xls","fn","data","setHeader","end","module","exports"],"sources":["/Users/milenmladenov/asset-management-fe-1/node_modules/json2xls/lib/json2xls.js"],"sourcesContent":["var nodeExcel = require('excel-export');\r\n\r\nvar transform = function(json,config) {\r\n    var conf = transform.prepareJson(json,config);\r\n    var result = nodeExcel.execute(conf);\r\n    return result;\r\n};\r\n\r\n//get a xls type based on js type\r\nfunction getType(obj,type) {\r\n    if (type) {\r\n        return type;\r\n    }\r\n    var t = typeof obj;\r\n    switch (t) {\r\n        case 'string':\r\n        case 'number':\r\n            return t;\r\n        case 'boolean':\r\n            return 'bool';\r\n        default:\r\n            return 'string';\r\n    }\r\n}\r\n\r\n//get a nested property from a JSON object given its key, i.e 'a.b.c'\r\nfunction getByString(object, path) {\r\n    path = path.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\r\n    path = path.replace(/^\\./, '');           // strip a leading dot\r\n    var a = path.split('.');\r\n    while (a.length) {\r\n        var n = a.shift();\r\n        if (n in object) {\r\n            object = (object[n]==undefined)?null:object[n];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    return object;\r\n}\r\n\r\n\r\n//prepare json to be in the correct format for excel-export\r\ntransform.prepareJson = function(json,config) {\r\n    var res = {};\r\n    var conf = config||{};\r\n    var jsonArr = [].concat(json);\r\n    var fields = conf.fields || Object.keys(jsonArr[0]||{});\r\n    var types = [];\r\n    if (!(fields instanceof Array)) {\r\n        types = Object.keys(fields).map(function(key) {\r\n            return fields[key];\r\n        });\r\n        fields = Object.keys(fields);\r\n    }\r\n    //cols\r\n    res.cols = fields.map(function(key,i) {\r\n        return {\r\n            caption: key,\r\n            type: getType(jsonArr[0][key],types[i]),\r\n            beforeCellWrite: function(row, cellData, eOpt){\r\n                eOpt.cellType = getType(cellData,types[i]);\r\n                return cellData;\r\n            }\r\n        };\r\n    });\r\n    //rows\r\n    res.rows = jsonArr.map(function(row) {\r\n        return fields.map(function(key) {\r\n            var value = getByString(row,key);\r\n            //stringify objects\r\n            if(value && value.constructor == Object) value = JSON.stringify(value);\r\n            //replace illegal xml characters with a square\r\n            //see http://www.w3.org/TR/xml/#charsets\r\n            //#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\r\n            if (typeof value === 'string') {\r\n                value = value.replace(/[^\\u0009\\u000A\\u000D\\u0020-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]/g,'');\r\n            }\r\n            return value;\r\n        });\r\n    });\r\n    //add style xml if given\r\n    if (conf.style) {\r\n        res.stylesXmlFile = conf.style;\r\n    }\r\n    return res;\r\n};\r\n\r\ntransform.middleware = function(req,res,next) {\r\n    res.xls = function(fn,data,config) {\r\n        var xls = transform(data,config);\r\n        res.setHeader('Content-Type', 'application/vnd.openxmlformats');\r\n        res.setHeader(\"Content-Disposition\", \"attachment; filename=\" + fn);\r\n        res.end(xls, 'binary');\r\n    };\r\n    next();\r\n};\r\n\r\nmodule.exports = transform;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}