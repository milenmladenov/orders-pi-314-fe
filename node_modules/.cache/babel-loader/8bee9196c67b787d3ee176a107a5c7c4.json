{"ast":null,"code":"var _jsxFileName = \"/Users/milenmladenov/asset-management-fe/src/pages/newExcelOrderForm.js\";\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx'; // Import the xlsx library\nimport NewOrderForm from './newOrderForm';\nconst NewExcelOrderForm = () => {\n  const [groupForms, setGroupForms] = useState([]);\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = e => {\n      const data = new Uint8Array(e.target.result);\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n      const excelData = XLSX.utils.sheet_to_json(worksheet, {\n        header: 1\n      });\n\n      // Assuming the headers are in the order: 'Модел', 'Фолио', 'Височина', 'Ширина', 'Брой', 'м2', 'Профил', 'Дръжка'\n      const [modelHeader, folioHeader, heightHeader, widthHeader, quantityHeader, areaHeader, profilHeader, handleHeader] = excelData[0];\n      const formData = excelData.slice(1).map(row => ({\n        modelName: row[modelHeader],\n        folioName: row[folioHeader],\n        height: row[heightHeader],\n        width: row[widthHeader],\n        number: row[quantityHeader],\n        area: row[areaHeader],\n        profilName: row[profilHeader],\n        handleName: row[handleHeader]\n      }));\n      setGroupForms(formData);\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-span-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"fileInput\",\n    className: \"block font-medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, \"\\u0418\\u043C\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u0430\\u043D\\u0435 \\u043D\\u0430 Excel \\u0444\\u0430\\u0439\\u043B:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    id: \"fileInput\",\n    name: \"fileInput\",\n    onChange: handleFileChange,\n    accept: \".xlsx, .xls\",\n    className: \"mt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  })), \"/>\");\n};\nexport default NewExcelOrderForm;","map":{"version":3,"names":["React","useState","XLSX","NewOrderForm","NewExcelOrderForm","groupForms","setGroupForms","handleFileChange","event","file","target","files","reader","FileReader","onload","e","data","Uint8Array","result","workbook","read","type","worksheet","Sheets","SheetNames","excelData","utils","sheet_to_json","header","modelHeader","folioHeader","heightHeader","widthHeader","quantityHeader","areaHeader","profilHeader","handleHeader","formData","slice","map","row","modelName","folioName","height","width","number","area","profilName","handleName","readAsArrayBuffer","createElement","Fragment","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","name","onChange","accept"],"sources":["/Users/milenmladenov/asset-management-fe/src/pages/newExcelOrderForm.js"],"sourcesContent":["    import React, { useState } from 'react';\n    import * as XLSX from 'xlsx'; // Import the xlsx library\n    import NewOrderForm from './newOrderForm';\n\n    const NewExcelOrderForm = () => {\n\n        const [groupForms, setGroupForms] = useState([]);\n\n        const handleFileChange = (event) => {\n            const file = event.target.files[0];\n            const reader = new FileReader();\n            reader.onload = (e) => {\n            const data = new Uint8Array(e.target.result);\n            const workbook = XLSX.read(data, { type: 'array' });\n            const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n            const excelData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n        \n            // Assuming the headers are in the order: 'Модел', 'Фолио', 'Височина', 'Ширина', 'Брой', 'м2', 'Профил', 'Дръжка'\n            const [modelHeader, folioHeader, heightHeader, widthHeader, quantityHeader, areaHeader, profilHeader, handleHeader] = excelData[0];\n            const formData = excelData.slice(1).map((row) => ({\n                modelName: row[modelHeader],\n                folioName: row[folioHeader],\n                height: row[heightHeader],\n                width: row[widthHeader],\n                number: row[quantityHeader],\n                area: row[areaHeader],\n                profilName: row[profilHeader],\n                handleName: row[handleHeader],\n            }));\n        \n            setGroupForms(formData);\n            };\n            reader.readAsArrayBuffer(file);\n        };\n\n        return (\n            <><div className=\"col-span-2\">\n                <label htmlFor=\"fileInput\" className=\"block font-medium\">\n                    Импортиране на Excel файл:\n                </label>\n                <input\n                    type=\"file\"\n                    id=\"fileInput\"\n                    name=\"fileInput\"\n                    onChange={handleFileChange}\n                    accept=\".xlsx, .xls\"\n                    className=\"mt-1\" />\n            </div>/></>\n        )\n\n    };\n\n    export default NewExcelOrderForm;\n"],"mappings":";AAAI,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,KAAKC,IAAI,MAAM,MAAM,CAAC,CAAC;AAC9B,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAE5B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMM,gBAAgB,GAAIC,KAAK,IAAK;IAChC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;MACvB,MAAMC,IAAI,GAAG,IAAIC,UAAU,CAACF,CAAC,CAACL,MAAM,CAACQ,MAAM,CAAC;MAC5C,MAAMC,QAAQ,GAAGjB,IAAI,CAACkB,IAAI,CAACJ,IAAI,EAAE;QAAEK,IAAI,EAAE;MAAQ,CAAC,CAAC;MACnD,MAAMC,SAAS,GAAGH,QAAQ,CAACI,MAAM,CAACJ,QAAQ,CAACK,UAAU,CAAC,CAAC,CAAC,CAAC;MACzD,MAAMC,SAAS,GAAGvB,IAAI,CAACwB,KAAK,CAACC,aAAa,CAACL,SAAS,EAAE;QAAEM,MAAM,EAAE;MAAE,CAAC,CAAC;;MAEpE;MACA,MAAM,CAACC,WAAW,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,cAAc,EAAEC,UAAU,EAAEC,YAAY,EAAEC,YAAY,CAAC,GAAGX,SAAS,CAAC,CAAC,CAAC;MAClI,MAAMY,QAAQ,GAAGZ,SAAS,CAACa,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEC,GAAG,KAAM;QAC9CC,SAAS,EAAED,GAAG,CAACX,WAAW,CAAC;QAC3Ba,SAAS,EAAEF,GAAG,CAACV,WAAW,CAAC;QAC3Ba,MAAM,EAAEH,GAAG,CAACT,YAAY,CAAC;QACzBa,KAAK,EAAEJ,GAAG,CAACR,WAAW,CAAC;QACvBa,MAAM,EAAEL,GAAG,CAACP,cAAc,CAAC;QAC3Ba,IAAI,EAAEN,GAAG,CAACN,UAAU,CAAC;QACrBa,UAAU,EAAEP,GAAG,CAACL,YAAY,CAAC;QAC7Ba,UAAU,EAAER,GAAG,CAACJ,YAAY;MAChC,CAAC,CAAC,CAAC;MAEH9B,aAAa,CAAC+B,QAAQ,CAAC;IACvB,CAAC;IACDzB,MAAM,CAACqC,iBAAiB,CAACxC,IAAI,CAAC;EAClC,CAAC;EAED,oBACIT,KAAA,CAAAkD,aAAA,CAAAlD,KAAA,CAAAmD,QAAA,qBAAEnD,KAAA,CAAAkD,aAAA;IAAKE,SAAS,EAAC,YAAY;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACzB1D,KAAA,CAAAkD,aAAA;IAAOS,OAAO,EAAC,WAAW;IAACP,SAAS,EAAC,mBAAmB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,iHAElD,CAAC,eACR1D,KAAA,CAAAkD,aAAA;IACI7B,IAAI,EAAC,MAAM;IACXuC,EAAE,EAAC,WAAW;IACdC,IAAI,EAAC,WAAW;IAChBC,QAAQ,EAAEvD,gBAAiB;IAC3BwD,MAAM,EAAC,aAAa;IACpBX,SAAS,EAAC,MAAM;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACrB,CAAC,MAAI,CAAC;AAGnB,CAAC;AAED,eAAetD,iBAAiB"},"metadata":{},"sourceType":"module"}